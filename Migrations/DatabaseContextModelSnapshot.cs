// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace gs_server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GsServer.Models.Attendance", b =>
                {
                    b.Property<byte[]>("AttendanceId")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<byte[]>("DisciplineId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)");

                    b.HasKey("AttendanceId");

                    b.HasIndex("Date");

                    b.HasIndex("DisciplineId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("GsServer.Models.AttendanceAttendeeStatus", b =>
                {
                    b.Property<byte[]>("AttendanceAttendeeStatusId")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("AttendanceId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("PersonId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("AttendanceAttendeeStatusId");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("PersonId");

                    b.ToTable("AttendanceAttendeeStatus");
                });

            modelBuilder.Entity("GsServer.Models.Customer", b =>
                {
                    b.Property<byte[]>("CustomerId")
                        .HasColumnType("bytea");

                    b.Property<string>("AdditionalInformation")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PersonId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("bytea");

                    b.HasKey("CustomerId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("GsServer.Models.Dependent", b =>
                {
                    b.Property<byte[]>("DependentId")
                        .HasColumnType("bytea");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("CustomerId")
                        .HasColumnType("bytea");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.HasKey("DependentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Dependents");
                });

            modelBuilder.Entity("GsServer.Models.Discipline", b =>
                {
                    b.Property<byte[]>("DisciplineId")
                        .HasColumnType("bytea");

                    b.Property<int[]>("ClassDays")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<byte[]>("InstructorId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<decimal>("TuitionPrice")
                        .HasColumnType("decimal(8, 4)");

                    b.HasKey("DisciplineId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("StartTime", "EndTime", "IsActive");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("GsServer.Models.Instructor", b =>
                {
                    b.Property<byte[]>("InstructorId")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PersonId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("InstructorId");

                    b.HasIndex("PersonId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("GsServer.Models.Notification", b =>
                {
                    b.Property<byte[]>("NotificationId")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("IsUnread")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("NotificationId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsUnread");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GsServer.Models.Order", b =>
                {
                    b.Property<byte[]>("OrderId")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("SaleId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.HasIndex("SaleId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GsServer.Models.Payment", b =>
                {
                    b.Property<byte[]>("PaymentId")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GsServer.Models.Person", b =>
                {
                    b.Property<byte[]>("PersonId")
                        .HasColumnType("bytea");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("char(14)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)");

                    b.Property<string>("MobilePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("PersonId");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("MobilePhoneNumber")
                        .IsUnique();

                    b.ToTable("People");
                });

            modelBuilder.Entity("GsServer.Models.Product", b =>
                {
                    b.Property<byte[]>("ProductId")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("PicturePath")
                        .HasColumnType("text");

                    b.Property<byte[]>("ProductBrandId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("ProductCategoryId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("GsServer.Models.ProductBrand", b =>
                {
                    b.Property<byte[]>("ProductBrandId")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductBrandId");

                    b.ToTable("ProductBrand");
                });

            modelBuilder.Entity("GsServer.Models.ProductCategory", b =>
                {
                    b.Property<byte[]>("ProductCategoryId")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("GsServer.Models.ProductVariant", b =>
                {
                    b.Property<byte[]>("ProductVariantId")
                        .HasColumnType("bytea");

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("ProductId")
                        .HasColumnType("bytea");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8, 4)");

                    b.HasKey("ProductVariantId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariant");
                });

            modelBuilder.Entity("GsServer.Models.ProductVariantInventory", b =>
                {
                    b.Property<byte[]>("ProductVariantInventoryId")
                        .HasColumnType("bytea");

                    b.Property<int>("MinimumStockAmount")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ProductVariantId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("integer");

                    b.HasKey("ProductVariantInventoryId");

                    b.HasIndex("ProductVariantId")
                        .IsUnique();

                    b.ToTable("ProductVariantInventory");
                });

            modelBuilder.Entity("GsServer.Models.Promotion", b =>
                {
                    b.Property<byte[]>("PromotionId")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("CustomerId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("PromotionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IsActive");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("GsServer.Models.RefreshToken", b =>
                {
                    b.Property<byte[]>("RefreshTokenId")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.HasIndex("Token", "IsValid", "CreatedAt")
                        .IsDescending();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("GsServer.Models.Return", b =>
                {
                    b.Property<byte[]>("ReturnId")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<decimal>("TotalAmountRefunded")
                        .HasColumnType("decimal(8, 4)");

                    b.HasKey("ReturnId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("GsServer.Models.ReturnItem", b =>
                {
                    b.Property<byte[]>("ReturnItemId")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("ProductVariantId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("QuantityReturned")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ReturnId")
                        .HasColumnType("bytea");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8, 4)");

                    b.HasKey("ReturnItemId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("ReturnId");

                    b.ToTable("ReturnItem");
                });

            modelBuilder.Entity("GsServer.Models.Sale", b =>
                {
                    b.Property<byte[]>("SaleId")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("CustomerId")
                        .HasColumnType("bytea");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)");

                    b.HasKey("SaleId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("GsServer.Models.SaleBilling", b =>
                {
                    b.Property<byte[]>("SaleBillingId")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)");

                    b.Property<byte[]>("PaymentId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("SaleId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(8, 4)");

                    b.HasKey("SaleBillingId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleBillings");
                });

            modelBuilder.Entity("GsServer.Models.Subscription", b =>
                {
                    b.Property<byte[]>("SubscriptionId")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("CustomerId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("DisciplineId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("PayDay")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8, 4)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("PayDay", "IsActive");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("GsServer.Models.SubscriptionBilling", b =>
                {
                    b.Property<byte[]>("SubscriptionBillingId")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(240)
                        .HasColumnType("character varying(240)");

                    b.Property<byte[]>("PaymentId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("SubscriptionId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(8, 4)");

                    b.HasKey("SubscriptionBillingId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionBillings");
                });

            modelBuilder.Entity("GsServer.Models.User", b =>
                {
                    b.Property<byte[]>("UserId")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasAllowedEmailNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasAllowedWhatsAppNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GsServer.Models.Attendance", b =>
                {
                    b.HasOne("GsServer.Models.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("GsServer.Models.AttendanceAttendeeStatus", b =>
                {
                    b.HasOne("GsServer.Models.Attendance", null)
                        .WithMany("AttendeesStatuses")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GsServer.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GsServer.Models.Customer", b =>
                {
                    b.HasOne("GsServer.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GsServer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Person");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GsServer.Models.Dependent", b =>
                {
                    b.HasOne("GsServer.Models.Customer", null)
                        .WithMany("Dependents")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("GsServer.Models.Discipline", b =>
                {
                    b.HasOne("GsServer.Models.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("GsServer.Models.Instructor", b =>
                {
                    b.HasOne("GsServer.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GsServer.Models.Notification", b =>
                {
                    b.HasOne("GsServer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GsServer.Models.Order", b =>
                {
                    b.HasOne("GsServer.Models.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("GsServer.Models.Payment", b =>
                {
                    b.OwnsMany("GsServer.Models.PaymentInstallment", "Installments", b1 =>
                        {
                            b1.Property<byte[]>("PaymentInstallmentId")
                                .HasColumnType("bytea");

                            b1.Property<DateOnly>("DueDate")
                                .HasColumnType("date");

                            b1.Property<decimal>("InstallmentAmount")
                                .HasColumnType("decimal(8, 4)");

                            b1.Property<int>("InstallmentNumber")
                                .HasColumnType("integer");

                            b1.Property<byte[]>("PaymentId")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<string>("PaymentMethod")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("character varying(16)");

                            b1.HasKey("PaymentInstallmentId");

                            b1.HasIndex("PaymentId");

                            b1.ToTable("PaymentInstallment");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId");
                        });

                    b.Navigation("Installments");
                });

            modelBuilder.Entity("GsServer.Models.Product", b =>
                {
                    b.HasOne("GsServer.Models.ProductBrand", "ProductBrand")
                        .WithMany()
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GsServer.Models.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductBrand");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("GsServer.Models.ProductVariant", b =>
                {
                    b.HasOne("GsServer.Models.Product", null)
                        .WithMany("Variants")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("GsServer.Models.ProductVariantInventory", b =>
                {
                    b.HasOne("GsServer.Models.ProductVariant", "ProductVariant")
                        .WithOne("Inventory")
                        .HasForeignKey("GsServer.Models.ProductVariantInventory", "ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("GsServer.Models.Promotion", b =>
                {
                    b.HasOne("GsServer.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GsServer.Models.RefreshToken", b =>
                {
                    b.HasOne("GsServer.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GsServer.Models.ReturnItem", b =>
                {
                    b.HasOne("GsServer.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GsServer.Models.Return", null)
                        .WithMany("ItemsReturned")
                        .HasForeignKey("ReturnId");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("GsServer.Models.Sale", b =>
                {
                    b.HasOne("GsServer.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.OwnsMany("GsServer.Models.SaleItem", "ItemsSold", b1 =>
                        {
                            b1.Property<byte[]>("SaleItemId")
                                .HasColumnType("bytea");

                            b1.Property<byte[]>("ProductVariantId")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<int>("QuantitySold")
                                .HasColumnType("integer");

                            b1.Property<byte[]>("SaleId")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<decimal>("UnitPrice")
                                .HasColumnType("decimal(8, 4)");

                            b1.HasKey("SaleItemId");

                            b1.HasIndex("ProductVariantId");

                            b1.HasIndex("SaleId");

                            b1.ToTable("SaleItem");

                            b1.HasOne("GsServer.Models.ProductVariant", "ProductVariant")
                                .WithMany()
                                .HasForeignKey("ProductVariantId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("SaleId");

                            b1.Navigation("ProductVariant");
                        });

                    b.Navigation("Customer");

                    b.Navigation("ItemsSold");
                });

            modelBuilder.Entity("GsServer.Models.SaleBilling", b =>
                {
                    b.HasOne("GsServer.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GsServer.Models.Sale", "Sale")
                        .WithMany()
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("GsServer.Models.Subscription", b =>
                {
                    b.HasOne("GsServer.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GsServer.Models.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Discipline");
                });

            modelBuilder.Entity("GsServer.Models.SubscriptionBilling", b =>
                {
                    b.HasOne("GsServer.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GsServer.Models.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("GsServer.Models.Attendance", b =>
                {
                    b.Navigation("AttendeesStatuses");
                });

            modelBuilder.Entity("GsServer.Models.Customer", b =>
                {
                    b.Navigation("Dependents");
                });

            modelBuilder.Entity("GsServer.Models.Product", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("GsServer.Models.ProductVariant", b =>
                {
                    b.Navigation("Inventory")
                        .IsRequired();
                });

            modelBuilder.Entity("GsServer.Models.Return", b =>
                {
                    b.Navigation("ItemsReturned");
                });
#pragma warning restore 612, 618
        }
    }
}
